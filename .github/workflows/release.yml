name: Release

on:
  workflow_dispatch:
  push:
    branches:
      - 'release'

env:
  VERSION: '0.1.${{ github.run_number }}'

jobs:
  macos:
    name: MacOS
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    - name: Update Version in code
      shell: pwsh
      run: |
        $version = (Get-Content -Path src/main.cpp -Raw) -replace '#define VERSION "1.0.0"', '#define VERSION "${{ env.VERSION }}"'
        $version | Set-Content -Path src/main.cpp
    - name: Install Qt
      uses: jurplel/install-qt-action@v4
      with:
        version: '6.8.2'
    - name: Build
      working-directory: src/project
      run: pwsh build.ps1
    - name: Publish artifacts
      uses: actions/upload-artifact@v4
      with:
        name: SQLiteQuerAnalyzer_MacOS_v${{ env.VERSION }}
        path: |
          src/build/SQLiteQueryAnalyzer.dmg
  windows:
    name: Windows
    runs-on:  windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Update Version Number (Qt Project)
        shell: pwsh
        run: |
          $version = (Get-Content -Path src/SQLiteAnalyzer.pro -Raw) -replace 'VERSION = 1.0.0', 'VERSION = ${{ env.VERSION }}'
          $version | Set-Content -Path src/SQLiteAnalyzer.pro

      - name: Update Version Number (Inno Setup)
        shell: pwsh
        run: |
          $version = (Get-Content -Path src/setup.iss -Raw) -replace '#define MyAppVersion "1.0.0"', '#define MyAppVersion "${{ env.VERSION }}"'
          $version | Set-Content -Path src/setup.iss

      - name: Update Version in code
        shell: pwsh
        run: |
          $version = (Get-Content -Path src/main.cpp -Raw) -replace '#define VERSION "1.0.0"', '#define VERSION "${{ env.VERSION }}"'
          $version | Set-Content -Path src/main.cpp

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: '6.8.2'
          host: windows
          target: desktop
          arch: win64_msvc2022_64
          dir: ${{ runner.temp }}
          setup-python: false

      - name: Download JOM
        uses: suisei-cn/actions-download-file@v1
        with:
          url: http://download.qt.io/official_releases/jom/jom.zip
          target: ${{ runner.temp }}\

      - name: Unzip JOM
        working-directory: ${{ runner.temp }}
        run: |
          7z x jom.zip -ojom
              
      - name: Create build directory
        run: mkdir ${{ runner.temp }}\build

      - name: Set up Visual Studio shell
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64

      - name: Build
        working-directory: ${{ github.workspace }}\src
        run: |          
          cmake . -DCMAKE_PREFIX_PATH=${{ runner.temp }}\Qt\6.8.2\msvc2022_64 -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_FLAGS="/Zc:__cplusplus /permissive-" -B build
          cmake --build build --config Release
          ${{ runner.temp }}\Qt\6.8.2\msvc2022_64\bin\windeployqt.exe .\build\Release\SQLiteQueryAnalyzer.exe
              
      - name: Zip build
        working-directory: ${{ runner.temp }}
        run: |
          7z a SQLiteQueryAnalyzer_Windows.zip ${{ github.workspace }}\src\project\build\Release\* -r
              
      - name: Publish Build
        uses: actions/upload-artifact@master
        with:
          name: SQLiteQuerAnalyzer_Windows_v${{ env.VERSION }}
          path: ${{ runner.temp }}\SQLiteQueryAnalyzer_Windows.zip

      - name: Inno Setup
        working-directory: ${{ github.workspace }}\src\project
        run: |
          ..\deps\innosetup\ISCC.exe setup.iss

      - name: Publish Installer
        uses: actions/upload-artifact@master
        with:
          name: SQLiteQuerAnalyzer_Windows_Installer_v${{ env.VERSION }}
          path: ${{ github.workspace }}\src\artifacts\SQLiteQueryAnalyzer-Setup.exe

  Release:
    needs: [
      macos, 
      windows
    ]
    runs-on: ubuntu-latest
    steps:
      - name: Create tag
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/${{ env.VERSION }}",
              sha: context.sha
            })
      - name: Create release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: v${{ env.VERSION }}
          draft: true
          prerelease: false
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Upload Windows Installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: artifacts/SQLiteQuerAnalyzer_Windows_Installer_v${{ env.VERSION }}/SQLiteQueryAnalyzer-Setup.exe
          asset_name: SQLiteQuerAnalyzer for Windows (Installer) v${{ env.VERSION }}.exe
          asset_content_type: application/zip
      - name: Upload Windows Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: artifacts/SQLiteQuerAnalyzer_Windows_v${{ env.VERSION }}/SQLiteQueryAnalyzer_Windows.zip
          asset_name: SQLiteQuerAnalyzer for Windows (Binaries) v${{ env.VERSION }}.zip
          asset_content_type: application/zip
      - name: Upload MacOS disk image
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: artifacts/SQLiteQuerAnalyzer_MacOS_v${{ env.VERSION }}/SQLiteQueryAnalyzer.dmg
          asset_name: SQLiteQuerAnalyzer for MacOS v${{ env.VERSION }}.dmg
          asset_content_type: application/zip
