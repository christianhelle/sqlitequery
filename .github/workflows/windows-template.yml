name: Windows Template

on:
  workflow_call:
    inputs:
      version:
        description: 'Version number for the build'
        required: true
        type: string
      release:
        description: 'Is release build'
        required: false
        default: false
        type: boolean

jobs:
  template:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Update Version Number (Qt Project)
        shell: pwsh
        run: |
          $version = (Get-Content -Path src/project/SQLiteAnalyzer.pro -Raw) -replace 'VERSION = 1.0.0', 'VERSION = ${{ inputs.version }}'
          $version | Set-Content -Path src/project/SQLiteAnalyzer.pro

      - name: Update Version Number (Inno Setup)
        shell: pwsh
        run: |
          $version = (Get-Content -Path src/project/setup.iss -Raw) -replace '#define MyAppVersion "1.0.0"', '#define MyAppVersion "${{ inputs.version }}"'
          $version | Set-Content -Path src/project/setup.iss

      - name: Update Version in code
        shell: pwsh
        run: |
          $version = (Get-Content -Path src/main.cpp -Raw) -replace '#define VERSION "1.0.0"', '#define VERSION "${{ inputs.version }}"'
          $version | Set-Content -Path src/main.cpp

      - name: Install Qt (Static)
        uses: jurplel/install-qt-action@v4
        with:
          version: '6.8.2'
          host: windows
          target: desktop
          arch: win64_msvc2022_64
          dir: ${{ runner.temp }}
          setup-python: false
          aqtversion: '==3.1.*'
          modules: 'qtpositioning qtmultimedia'
          archives: 'qtbase qtsvg qttools'
          tools: 'tools_cmake tools_ninja'
          set-env: true
          
      - name: Set up Visual Studio shell
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64

      - name: Create build directory
        run: mkdir ${{ runner.temp }}\build

      - name: Configure and Build Static Qt
        working-directory: ${{ runner.temp }}\Qt\6.8.2\Src
        shell: pwsh
        run: |
          # Create build directory for Qt static build
          mkdir static-build
          cd static-build
          
          # Configure Qt for static build
          ..\configure.bat -static -release -no-pch -prefix "${{ runner.temp }}\Qt\6.8.2\msvc2022_64-static" -platform win32-msvc -qt-zlib -qt-libpng -qt-libjpeg -nomake examples -nomake tests
          
          # Build and install Qt
          cmake --build . --parallel 4
          cmake --install .

      - name: Build Static SQLite Query Analyzer
        working-directory: ${{ github.workspace }}\src\project
        shell: pwsh
        run: |          
          # Configure CMake for static build
          cmake . `
            -DCMAKE_PREFIX_PATH="${{ runner.temp }}\Qt\6.8.2\msvc2022_64-static" `
            -DCMAKE_CXX_STANDARD=17 `
            -DCMAKE_CXX_FLAGS="/Zc:__cplusplus /permissive-" `
            -DBUILD_SHARED_LIBS=OFF `
            -DQT_STATICPLUGIN=ON `
            -DCMAKE_EXE_LINKER_FLAGS="/INCREMENTAL:NO /LTCG" `
            -DCMAKE_MSVC_RUNTIME_LIBRARY="MultiThreaded" `
            -B build
          
          # Build static binary
          cmake --build build --config Release --target SQLiteQueryAnalyzer
          
          # Verify it's a standalone exe (no DLL dependencies)
          echo "Checking dependencies of built executable"
          dumpbin /dependents .\build\Release\SQLiteQueryAnalyzer.exe

      - name: Zip standalone binary
        working-directory: ${{ runner.temp }}
        run: |
          # Only include the standalone executable
          7z a SQLiteQueryAnalyzer_Windows_Standalone.zip ${{ github.workspace }}\src\project\build\Release\SQLiteQueryAnalyzer.exe
              
      - name: Publish Standalone Build
        uses: actions/upload-artifact@master
        with:
          name: SQLiteQuerAnalyzer_Standalone_Windows_v${{ inputs.version }}
          path: ${{ runner.temp }}\SQLiteQueryAnalyzer_Windows_Standalone.zip

      - name: Inno Setup
        working-directory: ${{ github.workspace }}\src\project
        run: |
          ..\..\deps\innosetup\ISCC.exe setup.iss

      - name: Publish Installer
        uses: actions/upload-artifact@master
        with:
          name: SQLiteQuerAnalyzer_Windows_Installer_v${{ inputs.version }}
          path: ${{ github.workspace }}\src\artifacts\SQLiteQueryAnalyzer-Setup.exe
    
      - name: Build Chocolatey Package
        working-directory: ${{ github.workspace }}\src\project\chocolatey
        run: choco pack sqlitequery.nuspec --version ${{ inputs.version }}
    
      - name: Publish Chocolatey Package
        uses: actions/upload-artifact@master
        with:
          name: ChocolateyPackage
          path: sqlitequery.${{ inputs.version }}.nupkg

      - name: Upload Package to Chocolatey
        working-directory: ${{ github.workspace }}\src\project\chocolatey
        if: ${{ inputs.release == true }} && github.ref == 'refs/heads/master'
        continue-on-error: true
        run: |
          choco apiKey --key ${{ secrets.CHOCOLATEY_API_KEY }} --source https://push.chocolatey.org/
          choco push sqlitequery.${{ inputs.version }}.nupkg --source https://push.chocolatey.org/
