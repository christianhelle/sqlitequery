name: Windows Template

on:
  workflow_call:
    inputs:
      version:
        description: 'Version number for the build'
        required: true
        type: string
      release:
        description: 'Is release build'
        required: false
        default: false
        type: boolean

jobs:
  template:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Update Version Number (Qt Project)
        shell: pwsh
        run: |
          $version = (Get-Content -Path src/project/SQLiteAnalyzer.pro -Raw) -replace 'VERSION = 1.0.0', 'VERSION = ${{ inputs.version }}'
          $version | Set-Content -Path src/project/SQLiteAnalyzer.pro

      - name: Update Version Number (Inno Setup)
        shell: pwsh
        run: |
          $version = (Get-Content -Path src/project/setup.iss -Raw) -replace '#define MyAppVersion "1.0.0"', '#define MyAppVersion "${{ inputs.version }}"'
          $version | Set-Content -Path src/project/setup.iss

      - name: Update Version in code
        shell: pwsh
        run: |
          $version = (Get-Content -Path src/main.cpp -Raw) -replace '#define VERSION "1.0.0"', '#define VERSION "${{ inputs.version }}"'
          $version | Set-Content -Path src/main.cpp

      - name: Set up Visual Studio shell
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: '6.5.3'
          host: windows
          target: desktop
          arch: win64_msvc2019_64
          dir: ${{ runner.temp }}\Qt
          setup-python: true
          cache: true
          
      - name: Create Build Directory
        run: mkdir -p ${{ github.workspace }}\build

      - name: Configure and Build SQLite Query Analyzer
        working-directory: ${{ github.workspace }}
        shell: pwsh
        run: |
          # Use consistent Windows path format
          $qtDir = "${{ runner.temp }}\Qt\6.5.3\msvc2019_64"
          
          # First build dynamic version to preserve compatibility with Qt's binary distribution
          Write-Host "Configuring and building with dynamic Qt libraries..."
          
          # Configure with CMake
          cmake -B build -S src\project `
            -DCMAKE_PREFIX_PATH="$qtDir" `
            -DCMAKE_CXX_STANDARD=17 `
            -G "Visual Studio 17 2022" `
            -A x64
          
          # Build
          cmake --build build --config Release --parallel
          
          # Verify the executable exists before proceeding
          if (-not (Test-Path "build\Release\SQLiteQueryAnalyzer.exe")) {
            Write-Host "Error: Build failed, executable not found"
            exit 1
          }
          
          # Use windeployqt to collect all required DLLs
          Write-Host "Running windeployqt to collect dependencies..."
          $windeployqt = Join-Path -Path $qtDir -ChildPath "bin\windeployqt.exe"
          if (-not (Test-Path $windeployqt)) {
            Write-Host "Error: windeployqt.exe not found at: $windeployqt"
            Get-ChildItem "$qtDir\bin"
            exit 1
          }
          
          # Run windeployqt with proper path formatting
          & $windeployqt --release --no-translations --no-opengl-sw --no-system-d3d-compiler --no-virtualkeyboard --compiler-runtime "${{ github.workspace }}\build\Release\SQLiteQueryAnalyzer.exe"
          
          # Create a standalone package with all the DLLs reduced to bare minimum
          Write-Host "Creating standalone deployment package..."
          
          # Create deployment directory
          $deployDir = "${{ github.workspace }}\deploy\bin"
          New-Item -Path $deployDir -ItemType Directory -Force
          
          # Copy the executable and required files to deployment directory
          Copy-Item "build\Release\SQLiteQueryAnalyzer.exe" -Destination $deployDir
          
          # Copy only the necessary Qt DLLs (core functionality)
          $qtDlls = @(
            "Qt6Core.dll",
            "Qt6Gui.dll", 
            "Qt6Widgets.dll", 
            "Qt6Sql.dll"
          )
          
          foreach ($dll in $qtDlls) {
            $dllPath = "build\Release\$dll"
            if (Test-Path $dllPath) {
              Write-Host "Copying $dll to deployment directory"
              Copy-Item $dllPath -Destination $deployDir
            } else {
              Write-Host "Warning: Could not find $dll in build output"
            }
          }
          
          # Copy required plugin directories
          $requiredPluginFolders = @(
            "platforms",
            "styles",
            "sqldrivers"
          )
          
          foreach ($folder in $requiredPluginFolders) {
            $folderPath = "build\Release\$folder"
            if (Test-Path $folderPath) {
              Write-Host "Copying $folder to deployment directory"
              Copy-Item $folderPath -Destination "$deployDir\" -Recurse
            } else {
              Write-Host "Warning: Could not find $folder in build output"
            }
          }
          
          # Check for missing dependencies
          Write-Host "Checking deployment package for any missing dependencies..."
          $missingDeps = $false
          
          foreach ($file in (Get-ChildItem -Path $deployDir -Filter "*.exe" -Recurse)) {
            $deps = & dumpbin /dependents $file.FullName | Select-String -Pattern "\.dll"
            foreach ($dep in $deps) {
              $dllName = $dep -replace ".*\s+([^\s]+\.dll).*", '$1'
              if (($dllName -like "Qt*") -and -not (Test-Path "$deployDir\$dllName")) {
                Write-Host "Warning: Missing dependency $dllName for $($file.Name)"
                $missingDeps = $true
              }
            }
          }
          
          if ($missingDeps) {
            Write-Host "Some Qt dependencies might be missing. Copying all from build output..."
            Copy-Item "build\Release\*.dll" -Destination $deployDir -ErrorAction SilentlyContinue
          }

      - name: Zip standalone binary package
        working-directory: ${{ github.workspace }}
        run: |
          # Create a zip with just the executable and required DLLs
          7z a SQLiteQueryAnalyzer_Windows.zip .\deploy\bin\*
              
      - name: Publish Windows Build
        uses: actions/upload-artifact@master
        with:
          name: SQLiteQuerAnalyzer_Windows_v${{ inputs.version }}
          path: ${{ github.workspace }}\SQLiteQueryAnalyzer_Windows.zip

      - name: Inno Setup
        working-directory: ${{ github.workspace }}\src\project
        run: |
          # Configure the Inno Setup script to use our deployment
          $deployPath = "${{ github.workspace }}\deploy\bin"
          ..\..\deps\innosetup\ISCC.exe setup.iss "/DAppFolder=$deployPath"

      - name: Publish Installer
        uses: actions/upload-artifact@master
        with:
          name: SQLiteQuerAnalyzer_Windows_Installer_v${{ inputs.version }}
          path: ${{ github.workspace }}\src\artifacts\SQLiteQueryAnalyzer-Setup.exe
    
      - name: Build Chocolatey Package
        working-directory: ${{ github.workspace }}\src\project\chocolatey
        run: choco pack sqlitequery.nuspec --version ${{ inputs.version }}
    
      - name: Publish Chocolatey Package
        uses: actions/upload-artifact@master
        with:
          name: ChocolateyPackage
          path: sqlitequery.${{ inputs.version }}.nupkg

      - name: Upload Package to Chocolatey
        working-directory: ${{ github.workspace }}\src\project\chocolatey
        if: ${{ inputs.release == true }} && github.ref == 'refs/heads/master'
        continue-on-error: true
        run: |
          choco apiKey --key ${{ secrets.CHOCOLATEY_API_KEY }} --source https://push.chocolatey.org/
          choco push sqlitequery.${{ inputs.version }}.nupkg --source https://push.chocolatey.org/
