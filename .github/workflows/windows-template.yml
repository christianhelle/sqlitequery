name: Windows Template

on:
  workflow_call:
    inputs:
      version:
        description: 'Version number for the build'
        required: true
        type: string
      release:
        description: 'Is release build'
        required: false
        default: false
        type: boolean

jobs:
  template:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Update Version Number (Qt Project)
        shell: pwsh
        run: |
          $version = (Get-Content -Path src/project/SQLiteAnalyzer.pro -Raw) -replace 'VERSION = 1.0.0', 'VERSION = ${{ inputs.version }}'
          $version | Set-Content -Path src/project/SQLiteAnalyzer.pro

      - name: Update Version Number (Inno Setup)
        shell: pwsh
        run: |
          $version = (Get-Content -Path src/project/setup.iss -Raw) -replace '#define MyAppVersion "1.0.0"', '#define MyAppVersion "${{ inputs.version }}"'
          $version | Set-Content -Path src/project/setup.iss

      - name: Update Version in code
        shell: pwsh
        run: |
          $version = (Get-Content -Path src/main.cpp -Raw) -replace '#define VERSION "1.0.0"', '#define VERSION "${{ inputs.version }}"'
          $version | Set-Content -Path src/main.cpp

      - name: Set up Visual Studio shell
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64

      - name: Install Qt (Static)
        shell: pwsh
        run: |
          # Create directories
          mkdir -p ${{ runner.temp }}/Qt
          cd ${{ runner.temp }}/Qt
          
          # Download and install aqt
          pip install aqtinstall==3.1.*
          
          # Install static Qt using aqtinstall
          # Note: Using the mingw version as static MSVC builds are not directly available 
          # through aqtinstall, but we'll use the static libraries with MSVC
          aqt install-qt windows desktop 6.6.1 win64_mingw
          
          # Set environment variables
          echo "Qt6_DIR=${{ runner.temp }}/Qt/6.6.1/mingw_64/lib/cmake/Qt6" >> $env:GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=${{ runner.temp }}/Qt/6.6.1/mingw_64" >> $env:GITHUB_ENV
          
          # Add Qt bin to PATH
          echo "${{ runner.temp }}/Qt/6.6.1/mingw_64/bin" >> $env:GITHUB_PATH

      - name: Install Windows Build Tools
        shell: pwsh
        run: |
          # Install MSVC build tools if needed
          choco install -y visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Component.VC.Tools.x86.x64"
          
          # Download JOM for parallel builds
          Invoke-WebRequest -Uri "https://download.qt.io/official_releases/jom/jom.zip" -OutFile "${{ runner.temp }}/jom.zip"
          Expand-Archive -Path "${{ runner.temp }}/jom.zip" -DestinationPath "${{ runner.temp }}/jom"
          echo "${{ runner.temp }}/jom" >> $env:GITHUB_PATH

      - name: Create build directory
        run: mkdir -p ${{ github.workspace }}/build

      - name: Configure and Build SQLite Query Analyzer as Static Binary
        working-directory: ${{ github.workspace }}
        shell: pwsh
        run: |
          # Configure CMake for static build
          cmake -B build -S src/project `
            -DCMAKE_PREFIX_PATH="${{ runner.temp }}/Qt/6.6.1/mingw_64" `
            -DCMAKE_CXX_STANDARD=17 `
            -DCMAKE_CXX_FLAGS="/Zc:__cplusplus /permissive-" `
            -DBUILD_STATIC=ON `
            -DCMAKE_BUILD_TYPE=Release
          
          # Build with multiple cores
          cmake --build build --config Release --parallel
          
          # Verify it's a standalone exe (no DLL dependencies)
          echo "Checking dependencies of built executable:"
          Get-Item build/Release/SQLiteQueryAnalyzer.exe
          dumpbin /dependents build/Release/SQLiteQueryAnalyzer.exe

      - name: Copy Additional Required Files
        working-directory: ${{ github.workspace }}
        shell: pwsh
        run: |
          # Create deployment directory
          mkdir -p deploy/bin
          
          # Copy the executable
          Copy-Item build/Release/SQLiteQueryAnalyzer.exe -Destination deploy/bin/
          
          # Only copy essential Windows system DLLs if needed
          # This keeps our distribution minimal while ensuring it runs on target systems
          
          # Check and notify about the dependency status
          $deps = & dumpbin /dependents build/Release/SQLiteQueryAnalyzer.exe | Select-String -Pattern '\.dll'
          if ($deps) {
            echo "Note: The following dependencies are still required (these should be standard Windows DLLs only):"
            echo $deps
          } else {
            echo "Successfully created standalone executable with no DLL dependencies!"
          }

      - name: Zip standalone binary
        working-directory: ${{ github.workspace }}
        run: |
          # Create a zip with just the executable and any critical files
          7z a SQLiteQueryAnalyzer_Windows_Standalone.zip ./deploy/bin/*
              
      - name: Publish Standalone Build
        uses: actions/upload-artifact@master
        with:
          name: SQLiteQuerAnalyzer_Standalone_Windows_v${{ inputs.version }}
          path: ${{ github.workspace }}/SQLiteQueryAnalyzer_Windows_Standalone.zip

      - name: Inno Setup
        working-directory: ${{ github.workspace }}\src\project
        run: |
          # Update the Inno Setup script to use the standalone executable
          ..\..\deps\innosetup\ISCC.exe setup.iss /DStandaloneBuild

      - name: Publish Installer
        uses: actions/upload-artifact@master
        with:
          name: SQLiteQuerAnalyzer_Windows_Installer_v${{ inputs.version }}
          path: ${{ github.workspace }}\src\artifacts\SQLiteQueryAnalyzer-Setup.exe
    
      - name: Build Chocolatey Package
        working-directory: ${{ github.workspace }}\src\project\chocolatey
        run: choco pack sqlitequery.nuspec --version ${{ inputs.version }}
    
      - name: Publish Chocolatey Package
        uses: actions/upload-artifact@master
        with:
          name: ChocolateyPackage
          path: sqlitequery.${{ inputs.version }}.nupkg

      - name: Upload Package to Chocolatey
        working-directory: ${{ github.workspace }}\src\project\chocolatey
        if: ${{ inputs.release == true }} && github.ref == 'refs/heads/master'
        continue-on-error: true
        run: |
          choco apiKey --key ${{ secrets.CHOCOLATEY_API_KEY }} --source https://push.chocolatey.org/
          choco push sqlitequery.${{ inputs.version }}.nupkg --source https://push.chocolatey.org/
