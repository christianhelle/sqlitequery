name: Windows Template

on:
  workflow_call:
    inputs:
      version:
        description: 'Version number for the build'
        required: true
        type: string
      release:
        description: 'Is release build'
        required: false
        default: false
        type: boolean

jobs:
  template:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Update Version Number (Qt Project)
        shell: pwsh
        run: |
          $version = (Get-Content -Path src/project/SQLiteAnalyzer.pro -Raw) -replace 'VERSION = 1.0.0', 'VERSION = ${{ inputs.version }}'
          $version | Set-Content -Path src/project/SQLiteAnalyzer.pro

      - name: Update Version Number (Inno Setup)
        shell: pwsh
        run: |
          $version = (Get-Content -Path src/project/setup.iss -Raw) -replace '#define MyAppVersion "1.0.0"', '#define MyAppVersion "${{ inputs.version }}"'
          $version | Set-Content -Path src/project/setup.iss

      - name: Update Version in code
        shell: pwsh
        run: |
          $version = (Get-Content -Path src/main.cpp -Raw) -replace '#define VERSION "1.0.0"', '#define VERSION "${{ inputs.version }}"'
          $version | Set-Content -Path src/main.cpp

      - name: Set up Visual Studio shell
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: '6.5.3'  # Using 6.5.3 which has better MSVC integration
          host: windows
          target: desktop
          arch: win64_msvc2019_64
          dir: ${{ runner.temp }}/Qt
          setup-python: true
          tools: 'tools_ifw tools_mingw90 tools_cmake tools_ninja'
          cache: true
          extra: '--external 7z'
          
      - name: Create Build Directory
        run: mkdir -p ${{ github.workspace }}/build

      - name: Build Static Qt Components
        shell: pwsh
        run: |
          # Configure Qt static plugins
          $qtbase = "${{ runner.temp }}/Qt/6.5.3/msvc2019_64"
          
          # We'll use qtbase's tools to build a static version of necessary plugins
          Write-Host "Building static plugins from Qt libraries..."
          Write-Host "Qt base directory: $qtbase"
          
          # Create qconfig.pri with static build settings for plugins
          $staticPluginsConfig = @"
          CONFIG += static
          CONFIG -= shared
          DEFINES += QT_STATICPLUGIN
          "@
          
          # Create the configuration for static plugins in build directory
          New-Item -Path ${{ github.workspace }}/build/static_plugins -ItemType Directory -Force
          $staticPluginsConfig | Out-File -FilePath ${{ github.workspace }}/build/static_plugins/qconfig.pri -Encoding utf8

      - name: Configure and Build SQLite Query Analyzer as Standalone Binary
        working-directory: ${{ github.workspace }}
        shell: pwsh
        run: |
          $qtDir = "${{ runner.temp }}/Qt/6.5.3/msvc2019_64"
          
          # Configure CMake for static build with MSVC
          cmake -B build -S src/project `
            -DCMAKE_PREFIX_PATH="$qtDir" `
            -DCMAKE_CXX_STANDARD=17 `
            -DCMAKE_CXX_FLAGS="/Zc:__cplusplus /permissive- /MT" `
            -DBUILD_STATIC=ON `
            -DCMAKE_MSVC_RUNTIME_LIBRARY="MultiThreaded" `
            -DCMAKE_EXE_LINKER_FLAGS="/MANIFEST:NO" `
            -G "Visual Studio 17 2022" `
            -A x64
          
          # Build with multiple cores
          cmake --build build --config Release --parallel
          
          # Verify it's a standalone exe (no DLL dependencies)
          echo "Checking dependencies of built executable:"
          if (Test-Path build/Release/SQLiteQueryAnalyzer.exe) {
            Get-Item build/Release/SQLiteQueryAnalyzer.exe
            dumpbin /dependents build/Release/SQLiteQueryAnalyzer.exe
          } else {
            Write-Host "Error: SQLiteQueryAnalyzer.exe was not built successfully"
            exit 1
          }

      - name: Process Binary for Deployment
        working-directory: ${{ github.workspace }}
        shell: pwsh
        run: |
          # Create deployment directory
          mkdir -p deploy/bin
          
          # Copy the executable
          Copy-Item build/Release/SQLiteQueryAnalyzer.exe -Destination deploy/bin/ -ErrorAction Continue
          
          # Check and notify about the dependency status
          $deps = & dumpbin /dependents build/Release/SQLiteQueryAnalyzer.exe | Select-String -Pattern '\.dll' | Where-Object { $_ -notmatch 'KERNEL32\.dll|USER32\.dll|GDI32\.dll|SHELL32\.dll|ole32\.dll|ADVAPI32\.dll|OLEAUT32\.dll|COMDLG32\.dll|COMCTL32\.dll|VERSION\.dll|IMM32\.dll|WINMM\.dll|WS2_32\.dll|MSVCP140\.dll|VCRUNTIME140\.dll' }
          
          if ($deps) {
            echo "Note: The following non-system dependencies are still required:"
            echo $deps
            
            # Additional steps to handle Qt dependencies if needed
            # We'll use the Microsoft recommended approach to ensure these are included
            echo "Adding Visual C++ redistributable to ensure runtime compatibility..."
            Copy-Item "C:\Program Files (x86)\Microsoft Visual Studio\2022\Enterprise\VC\Redist\MSVC\*\x64\Microsoft.VC143.CRT\*.dll" deploy/bin/ -ErrorAction Continue
          } else {
            echo "Successfully created standalone executable with only system DLL dependencies!"
          }

      - name: Zip standalone binary
        working-directory: ${{ github.workspace }}
        run: |
          # Create a zip with the executable and any necessary DLLs
          7z a SQLiteQueryAnalyzer_Windows_Standalone.zip ./deploy/bin/*
              
      - name: Publish Standalone Build
        uses: actions/upload-artifact@master
        with:
          name: SQLiteQuerAnalyzer_Standalone_Windows_v${{ inputs.version }}
          path: ${{ github.workspace }}/SQLiteQueryAnalyzer_Windows_Standalone.zip

      - name: Inno Setup
        working-directory: ${{ github.workspace }}\src\project
        run: |
          # Update the Inno Setup script to use the standalone executable
          ..\..\deps\innosetup\ISCC.exe setup.iss /DStandaloneBuild

      - name: Publish Installer
        uses: actions/upload-artifact@master
        with:
          name: SQLiteQuerAnalyzer_Windows_Installer_v${{ inputs.version }}
          path: ${{ github.workspace }}\src\artifacts\SQLiteQueryAnalyzer-Setup.exe
    
      - name: Build Chocolatey Package
        working-directory: ${{ github.workspace }}\src\project\chocolatey
        run: choco pack sqlitequery.nuspec --version ${{ inputs.version }}
    
      - name: Publish Chocolatey Package
        uses: actions/upload-artifact@master
        with:
          name: ChocolateyPackage
          path: sqlitequery.${{ inputs.version }}.nupkg

      - name: Upload Package to Chocolatey
        working-directory: ${{ github.workspace }}\src\project\chocolatey
        if: ${{ inputs.release == true }} && github.ref == 'refs/heads/master'
        continue-on-error: true
        run: |
          choco apiKey --key ${{ secrets.CHOCOLATEY_API_KEY }} --source https://push.chocolatey.org/
          choco push sqlitequery.${{ inputs.version }}.nupkg --source https://push.chocolatey.org/
